import cv2
import numpy as np
from tkinter import *
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

class ImageEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Editor")
        self.root.geometry("1000x800")

        self.image = None
        self.original_image = None
        self.cropped_image = None
        self.start_x = self.start_y = 0
        self.rect = None

        self.create_widgets()

    def create_widgets(self):
        # Load Image Button
        self.load_button = Button(self.root, text="Load Image", command=self.load_image)
        self.load_button.pack()

        # Canvas for displaying image
        self.canvas = Canvas(self.root, width=800, height=500)
        self.canvas.pack()

        # Crop Button
        self.crop_button = Button(self.root, text="Crop Image", command=self.crop_image)
        self.crop_button.pack()

        # Slider for resizing the cropped image
        self.resize_slider = Scale(self.root, from_=10, to=200, orient="horizontal", label="Resize")
        self.resize_slider.pack()

        # Save Button
        self.save_button = Button(self.root, text="Save Image", command=self.save_image)
        self.save_button.pack()

    def load_image(self):
        # Path to your image file (Bucatini Bridge.jpg)
        file_path = "C:/Users/sagar/OneDrive/Desktop/Software now/Bucatini Bridge.jpg"  # Replace with the correct file path on your system
        if not file_path:
            return

        # Read and display the image
        self.image = cv2.imread(file_path)
        self.original_image = self.image.copy()
        self.image_rgb = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # Convert image to RGB for PIL
        self.display_image(self.image_rgb)

    def display_image(self, img):
        # Convert the image to PIL format and display on canvas
        self.img_pil = Image.fromarray(img)
        self.img_tk = ImageTk.PhotoImage(self.img_pil)
        self.canvas.create_image(0, 0, anchor=NW, image=self.img_tk)
        self.canvas.config(scrollregion=self.canvas.bbox(ALL))

    def crop_image(self):
        # Allow the user to select a region of the image
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)

    def on_press(self, event):
        self.start_x, self.start_y = event.x, event.y
        if self.rect:
            self.canvas.delete(self.rect)
        self.rect = self.canvas.create_rectangle(self.start_x, self.start_y, self.start_x, self.start_y, outline="red")

    def on_drag(self, event):
        self.canvas.coords(self.rect, self.start_x, self.start_y, event.x, event.y)

    def on_release(self, event):
        x1, y1, x2, y2 = self.canvas.coords(self.rect)
        x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)
        self.cropped_image = self.image[y1:y2, x1:x2]
        self.display_image(self.cropped_image)

    def save_image(self):
        if self.cropped_image is None:
            messagebox.showwarning("Warning", "No image to save!")
            return
        save_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG", "*.png"), ("JPEG", "*.jpg")])
        if save_path:
            cv2.imwrite(save_path, self.cropped_image)

# Run the application
root = Tk()
app = ImageEditor(root)
root.mainloop()
